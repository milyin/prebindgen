use std::{
    cell::RefCell,
    collections::{HashMap, HashSet},
    fs,
    path::Path,
};

use roxygen::roxygen;

use crate::{api::record::Record, utils::jsonl::read_jsonl_file, SourceLocation, CRATE_NAME_FILE};

/// File extension for data files
const JSONL_EXTENSION: &str = ".jsonl";
thread_local! {
    static DOCTEST_SOURCE: RefCell<Option<Source>> = const { RefCell::new(None) };
}

/// Provides access to prebindgen data generated by the `#[prebindgen]` macro
///
/// The `Source` struct reads prebindgen data files from a directory that was
/// initialized by [`init_prebindgen_out_dir`](crate::init_prebindgen_out_dir) in
/// the source project's `build.rs`. This allows destination projects to access
/// and process the collected FFI interface definitions.
///
/// # Workflow
///
/// 1. **Source project**: Calls `init_prebindgen_out_dir()` in `build.rs` and uses `#[prebindgen]` macro
/// 2. **Destination project**: Uses `Source::new()` to read the collected data
///
/// # Groups
///
/// Items are organized into groups based on the first parameter of the `#[prebindgen]`
/// macro. For example, `#[prebindgen("structs")]` creates items in the "structs" group.
/// Items without an explicit group are placed in the "default" group.
///
/// # Example
///
/// The `PREBINDGEN_OUT_DIR` constant is defined in the source FFI crate using the
/// `prebindgen_out_dir!()` macro:
///
/// ```ignore
/// // In source_ffi/src/lib.rs
/// use prebindgen_proc_macro::{prebindgen, prebindgen_out_dir};
///
/// pub const PREBINDGEN_OUT_DIR: &str = prebindgen_out_dir!();
///
/// #[prebindgen]
/// pub fn my_function() -> i32 { 42 }
/// ```
///
/// Then in the destination project's `build.rs`:
///
/// ```
/// # prebindgen::Source::init_doctest_simulate();
/// let source = prebindgen::Source::new("source_ffi");
///
/// // Process all items
/// for (item, location) in source.items_all() {
///     // Process each syn::Item...
/// }
/// ```
#[derive(Clone)]
pub struct Source {
    crate_name: String,
    items: HashMap<String, Vec<(syn::Item, SourceLocation)>>,
}

impl Source {
    /// Create a new `Source` instance from directory, specified by variable `DEP_<uppercase_crate_name>_PREBINDGEN`.
    /// This variable is passed from upstream source "ffi" crate by `init_prebindgen_out_dir()` function.
    /// This `crate_name` value is also used to prefix source crate function if not overridden by `crate_name()` method.
    #[roxygen]
    pub fn new(
        /// The name of the source crate that generated the prebindgen data
        crate_name: &str,
    ) -> Self {
        if let Some(source) = DOCTEST_SOURCE.with(|source| (*source.borrow()).clone()) {
            return source;
        }
        let uppercase_crate_name = crate_name.to_uppercase();
        let input_dir = std::env::var(format!("DEP_{uppercase_crate_name}_PREBINDGEN"))
                .unwrap_or_else(|e| {
                    panic!(
                        "{e}: Environment variable DEP_{uppercase_crate_name}_PREBINDGEN not found. \
                    Make sure to call init_prebindgen_out_dir() in the build.rs of the source crate."
                    )
                });
        Self::from_path(input_dir)
    }

    #[roxygen]
    pub fn from_path<P: AsRef<Path>>(
        /// Path to the directory containing prebindgen data files
        input_dir: P,
    ) -> Self {
        // Determine the crate name or panic if not initialized
        let input_dir = input_dir.as_ref().to_path_buf();

        if !input_dir.is_dir() {
            panic!(
                "Input directory {} does not exist or is not a directory",
                input_dir.display()
            );
        }
        let crate_name = read_stored_crate_name(&input_dir).unwrap_or_else(|| {
            panic!(
                "The directory {} was not initialized with init_prebindgen_out_dir(). \
                Please ensure that init_prebindgen_out_dir() is called in the build.rs of the source crate.",
                input_dir.display()
            )
        });

        let groups = Self::discover_groups(&input_dir);
        let mut items = HashMap::new();
        for group in groups {
            let records = Self::read_group(&input_dir, &group);
            let group_items = records.iter().map(|r| (r.parse())).collect::<Vec<_>>();
            items.insert(group, group_items);
        }

        Self { crate_name, items }
    }

    #[doc(hidden)]
    /// Initialize the Source for doctests by creating a dummy Source with few test items
    pub fn init_doctest_simulate() {
        let source = Self {
            crate_name: "source_ffi".to_string(),
            items: HashMap::from([
                (
                    "structs".to_string(),
                    vec![(
                        syn::parse_quote! {
                            #[prebindgen("structs")]
                            pub struct TestStruct {
                                pub field: i32,
                            }
                        },
                        SourceLocation::default(),
                    )],
                ),
                (
                    "functions".to_string(),
                    vec![(
                        syn::parse_quote! {
                            #[prebindgen("functions")]
                            pub fn test_function() -> i32 { 42 }
                        },
                        SourceLocation::default(),
                    )],
                ),
            ]),
        };
        DOCTEST_SOURCE.with(|cell| {
            *cell.borrow_mut() = Some(source);
        });
    }

    /// Returns the name of the source crate that generated the prebindgen data
    ///
    /// This is typically used by [`FfiConverter`](crate::batching::FfiConverter) to
    /// generate proper function calls to the original crate.
    ///
    /// # Example
    ///
    /// ```
    /// # prebindgen::Source::init_doctest_simulate();
    /// let source = prebindgen::Source::new("source_ffi");
    /// let crate_name = source.crate_name();
    /// ```
    pub fn crate_name(&self) -> &str {
        &self.crate_name
    }

    /// Returns an iterator over items from specific groups
    ///
    /// # Parameters
    ///
    /// * `groups` - Array of group names to include
    ///
    /// # Example
    ///
    /// ```
    /// # prebindgen::Source::init_doctest_simulate();
    /// let source = prebindgen::Source::new("source_ffi");
    /// // Process only items from "structs" and "functions" groups
    /// let items = source.items_in_groups(&["structs"]).collect::<Vec<_>>();
    /// assert_eq!(items.len(), 1); // only TestStruct should be present
    /// ```
    pub fn items_in_groups<'a>(
        &'a self,
        groups: &'a [&'a str],
    ) -> impl Iterator<Item = (syn::Item, SourceLocation)> + 'a {
        groups
            .iter()
            .filter_map(|group| self.items.get(*group))
            .flat_map(|records| records.iter())
            .cloned()
    }

    /// Returns an iterator over items excluding specific groups
    ///
    /// # Parameters
    ///
    /// * `groups` - Array of group names to exclude
    ///
    /// # Example
    ///
    /// ```
    /// # prebindgen::Source::init_doctest_simulate();
    /// let source = prebindgen::Source::new("source_ffi");
    /// let items = source.items_except_groups(&["structs"]).collect::<Vec<_>>();
    /// assert_eq!(items.len(), 1); // only test_function should be present
    /// ```
    pub fn items_except_groups<'a>(
        &'a self,
        groups: &'a [&'a str],
    ) -> impl Iterator<Item = (syn::Item, SourceLocation)> + 'a {
        self.items
            .iter()
            .filter(|(group, _)| !groups.contains(&group.as_str()))
            .flat_map(|(_, records)| records.iter())
            .cloned()
    }

    /// Returns an iterator over all items from all groups
    ///
    /// This is the most commonly used method for processing all prebindgen items.
    ///
    /// # Example
    ///
    /// ```
    /// # prebindgen::Source::init_doctest_simulate();
    /// let source = prebindgen::Source::new("source_ffi");
    /// let items: Vec<_> = source.items_all().collect();
    /// assert_eq!(items.len(), 2); // should contain TestStruct and test_function
    /// ```
    pub fn items_all<'a>(&'a self) -> impl Iterator<Item = (syn::Item, SourceLocation)> + 'a {
        self.items
            .iter()
            .flat_map(|(_, records)| records.iter())
            .cloned()
    }

    /// Internal method to read all exported files matching the group name pattern `<group>_*`
    fn read_group<P: AsRef<Path>>(input_dir: P, group: &str) -> Vec<Record> {
        let pattern = format!("{group}_");
        let mut record_map = HashMap::new();

        // Read the directory and find all matching files
        if let Ok(entries) = fs::read_dir(&input_dir) {
            for entry in entries.flatten() {
                let path = entry.path();
                if let Some(file_name) = path.file_name().and_then(|n| n.to_str()) {
                    if file_name.starts_with(&pattern) && file_name.ends_with(JSONL_EXTENSION) {
                        #[cfg(feature = "debug")]
                        println!("Reading exported file: {}", path.display());
                        let path_clone = path.clone();

                        match read_jsonl_file(&path) {
                            Ok(records) => {
                                for record in records {
                                    // Use HashMap to deduplicate records by name
                                    record_map.insert(record.name.clone(), record);
                                }
                            }
                            Err(e) => {
                                panic!("Failed to read {}: {}", path_clone.display(), e);
                            }
                        }
                    }
                }
            }
        }

        // Return deduplicated records for this group
        record_map.into_values().collect::<Vec<_>>()
    }

    /// Internal method to discover all available groups from the directory
    fn discover_groups<P: AsRef<Path>>(input_dir: P) -> HashSet<String> {
        let mut groups = HashSet::new();

        // Discover all available groups
        if let Ok(entries) = fs::read_dir(input_dir) {
            for entry in entries.flatten() {
                let path = entry.path();
                if let Some(file_name) = path.file_name().and_then(|n| n.to_str()) {
                    if file_name.ends_with(JSONL_EXTENSION) {
                        // Extract group name from filename (everything before the first underscore)
                        if let Some(underscore_pos) = file_name.find('_') {
                            let group_name = &file_name[..underscore_pos];
                            groups.insert(group_name.to_string());
                        }
                    }
                }
            }
        }

        groups
    }
}

/// Read the crate name from the stored file
fn read_stored_crate_name(input_dir: &Path) -> Option<String> {
    let crate_name_path = input_dir.join(CRATE_NAME_FILE);
    fs::read_to_string(&crate_name_path)
        .ok()
        .map(|s| s.trim().to_string())
}
