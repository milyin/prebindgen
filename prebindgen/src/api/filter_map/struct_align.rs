//! Query utilities for extracting information from syn::Item structures

use quote::ToTokens;

use crate::SourceLocation;

/// Extract struct alignment information for csbindgen compatibility
///
/// The `csbindgen` tool loses structure alignment data when generating C# bindings,
/// which can cause memory layout issues. This function extracts alignment information
/// from `#[repr(align(N))]` attributes, allowing you to collect this data and later
/// patch the code generated by csbindgen.
///
/// # Returns
///
/// - `Some((struct_name, alignment))` for structs with `#[repr(align(N))]` attributes
/// - `None` for non-struct items or structs without alignment attributes
///
/// # Example
///
/// ```
/// let source = prebindgen::Source::new("source_ffi");
///
/// // Extract alignment information from structs
/// let alignments: Vec<_> = source
///     .items_all()
///     .filter_map(prebindgen::filter_map::struct_align)
///     .collect();
/// 
/// // Use alignment data to patch csbindgen output
/// for (struct_name, alignment) in alignments {
///     println!("Struct {} has alignment {}", struct_name, alignment);
///     // Apply alignment fixes to generated C# code
/// }
/// ```
pub fn struct_align(item: (syn::Item, SourceLocation)) -> Option<(String, u32)> {
    if let (syn::Item::Struct(s), _) = item {
        s.attrs.iter().find_map(|attr| {
            if attr.path().is_ident("repr") {
                let tokens_str = attr.meta.to_token_stream().to_string();
                if let Some(align_pos) = tokens_str.find("align") {
                    let after_align = &tokens_str[align_pos + 5..];
                    let start = after_align.find('(')?;
                    let end = after_align.find(')')?;
                    let align = after_align[start + 1..end].trim().parse().ok()?;
                    Some((s.ident.to_string(), align))
                } else {
                    None
                }
            } else {
                None
            }
        })
    } else {
        None
    }
}
