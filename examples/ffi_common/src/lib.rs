use prebindgen_proc_macro::{prebindgen, prebindgen_json_path};

pub const PREBINDGEN_JSON: &str = prebindgen_json_path!();

// Simulate the situation when part of the ffi code is generated
// on build.rs stage. This may cause the problem with cross-compilation, 
// so we need to take additional meausres to ensure the code generated by
// `#[prebindgen]` macro and available by `prebindgen_path!()` macro
// is correct for the target architecture.
// See build.rs for details.
include!(concat!(env!("OUT_DIR"), "/generated.rs"));

#[prebindgen]
#[repr(C)]
#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Foo {
    // Demonstrate that for #cfg macro all works transparently
    #[cfg(target_arch = "x86_64")]
    pub x86_64_field: u64,
    #[cfg(target_arch = "aarch64")]
    pub aarch64_field: u64,
}

pub fn copy_foo(dst: &mut std::mem::MaybeUninit<Foo>, src: &Foo) {
    unsafe {
        dst.as_mut_ptr().write(*src);
    }
}
